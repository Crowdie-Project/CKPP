let Papa;_7f8‍.x([["default",()=>CKPP_Resolver]]);_7f8‍.w("papaparse",[["default",["Papa"],function(v){Papa=v}]]);//LICENSE GOES HERE!


const fs = require('fs').promises;

               class CKPP_Resolver {

  static async loadCSV(filename){

	let { data: CSV, error } = await fs.readFile(filename, 'utf-8')
	.then(csv => Papa.parse(csv));
	//.then(obj => console.log(obj));
    if (error) _7f8‍.g.console.log("error", error);
    else{
      return CSV;
    }
  }

  	/* try {
      const CSV = await import(filename);
	   } catch (error) {
	      console.error('import failed');
	   }
  	if(CSV){
		const fetchMainCategories = async () => {
	    let { data, error } = await fetch(CSV)
	    .then(r => r.text())
	    .then(CSV => readString(CSV,{header:true}))
	      if (error)console.log("error", error);
	      else{
	        console.log(data);
	      }
	  }
  	}

    fs.open('myfile', 'r', (err, fd) => {
    if (err) {
      if (err.code === 'ENOENT') {
        console.error('myfile does not exist');
        return;
      }
   
      throw err;
    }
   
    console.log(fd);
  });*/

  //init to load csv and categories
  static async init() {
    //static locale="EN";
    const Categories = await (CKPP_Resolver.loadCSV('./localization/EN/categories.csv'));
    const Codes = await (CKPP_Resolver.loadCSV('./localization/EN/code-table.csv'));
    _7f8‍.g.console.log(Categories);
    _7f8‍.g.console.log(Codes);
  }
	

	/*
	//read from csv
	  
	*/

	//return name

	//list category

	//return start of finish or finish of start
}

CKPP_Resolver.init();
